{:type :fn, :src "(deftype FiniteDomain [s min max]\n  Object\n  (equals [this that]\n    (if (finite-domain? that)\n      (if (= (-member-count this) (-member-count that))\n        (= s (:s that))\n        false)\n      false))\n\n  clojure.lang.ILookup\n  (valAt [this k]\n    (.valAt this k nil))\n  (valAt [this k not-found]\n    (case k\n      :s s\n      :min min\n      :max max\n      not-found))\n\n  IMemberCount\n  (-member-count [this] (count s))\n\n  IInterval\n  (-lb [_] min)\n  (-ub [_] max)\n\n  ISortedDomain\n  (-drop-one [_]\n    (let [s (disj s min)\n          c (count s)]\n      (cond\n       (= c 1) (first s)\n       (core/> c 1) (FiniteDomain. s (first s) max)\n       :else nil)))\n\n  (-drop-before [_ n]\n    (apply domain (drop-while #(core/< % n) s)))\n\n  (-keep-before [this n]\n    (apply domain (take-while #(core/< % n) s)))\n\n  ISet\n  (-member? [this n]\n    (if (s n) true false))\n\n  (-disjoint? [this that]\n    (cond\n     (integer? that)\n       (if (s that) false true)\n     (instance? FiniteDomain that)\n       (cond\n         (core/< max (:min that)) true\n         (core/> min (:max that)) true\n         :else (empty? (set/intersection s (:s that))))\n     :else (disjoint?* this that)))\n\n  (-intersection [this that]\n    (cond\n     (integer? that)\n       (when (-member? this that) that)\n     (instance? FiniteDomain that)\n       (sorted-set->domain (set/intersection s (:s that)))\n     :else\n       (intersection* this that)))\n\n  (-difference [this that]\n    (cond\n     (integer? that)\n       (sorted-set->domain (disj s that))\n     (instance? FiniteDomain that)\n       (sorted-set->domain (set/difference s (:s that)))\n     :else\n       (difference* this that)))\n\n  IIntervals\n  (-intervals [_] (seq s))\n\n  IMergeDomains\n  (-merge-doms [this that]\n    (-intersection this that)))", :ns "clojure.core.logic.fd", :name "->FiniteDomain", :file "clojure/core/logic/fd.clj", :column 1, :line 64, :arglists ([s min max]), :doc "Positional factory function for class clojure.core.logic.fd.FiniteDomain."}