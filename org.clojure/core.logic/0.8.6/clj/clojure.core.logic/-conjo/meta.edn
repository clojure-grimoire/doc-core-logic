{:ns "clojure.core.logic", :name "-conjo", :file "clojure/core/logic.clj", :type :fn, :src "(defn -conjo\n  ([coll args out]\n    (reify\n      IConstraintStep\n      (-step [this s]\n        (reify\n          clojure.lang.IFn\n          (invoke [_ s]\n            (let [coll (walk s coll)\n                  args (walk s args)]\n              (if-not (lvar? coll)\n                ((composeg\n                   (== (apply conj coll args) out)\n                   (remcg this)) s)\n                (let [outv (apply (-joncf out) out args)]\n                  (if-not (= outv ::failed)\n                    ((composeg\n                       (== outv coll)\n                       (remcg this)) s))))))\n          IRunnable\n          (-runnable? [_]\n            (and (every? #(ground-term? % s) args)\n                 (or (ground-term? coll s)\n                     (ground-term? out s))))))\n      IConstraintOp\n      (-rator [_]\n        `conjo)\n      (-rands [_]\n        (vec (concat [coll] args [out])))\n      IReifiableConstraint\n      (-reifyc [_ v r s]\n        `(conjo ~coll ~@(-reify s (concat args [out]) r)))\n      IConstraintWatchedStores\n      (-watched-stores [this] #{::subst}))))", :column 1, :line 2700, :arglists ([coll args out])}