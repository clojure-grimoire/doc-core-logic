{:ns "clojure.core.logic.fd", :name "+c", :file "clojure/core/logic/fd.clj", :type :fn, :src "(defn +c [u v w]\n  (reify \n    IEnforceableConstraint\n    IConstraintStep\n    (-step [this s]\n      (let-dom s [u du v dv w dw]\n        (reify\n          clojure.lang.IFn\n          (invoke [_ s]\n            (let [[wmin wmax] (if dw\n                                (bounds dw)\n                                [(core/+ (-lb du) (-lb dv)) (core/+ (-ub du) (-ub dv))])\n                  [umin umax] (if du\n                                (bounds du)\n                                [(core/- (-lb dw) (-ub dv)) (core/- (-ub dw) (-lb dv))])\n                  [vmin vmax] (if dv\n                                (bounds dv)\n                                [(core/- (-lb dw) (-ub du)) (core/- (-ub dw) (-lb du))])\n                  wi (interval (core/+ umin vmin) (core/+ umax vmax))\n                  ui (interval (core/- wmin vmax) (core/- wmax vmin))\n                  vi (interval (core/- wmin umax) (core/- wmax umin))]\n              (when-let [wi (if (and wi dw) (-intersection wi dw) wi)]\n                (when-let [ui (if (and ui du) (-intersection ui du) ui)]\n                  (when-let [vi (if (and vi dv) (-intersection vi dv) vi)]\n                    (when (or (not (every? singleton-dom? [wi ui vi]))\n                              (core/= (core/+ ui vi) wi))\n                      ((composeg*\n                         (process-dom w wi dw)\n                         (process-dom u ui du)\n                         (process-dom v vi dv))\n                        s)))))))\n          IEntailed\n          (-entailed? [_]\n            (and (singleton-dom? du)\n                 (singleton-dom? dv)\n                 (singleton-dom? dw)\n                 (= (core/+ du dv) dw)))\n          IRunnable\n          (-runnable? [_]\n            (cond\n              du (or dv dw)\n              dv (or du dw)\n              dw (or du dv)\n              :else false)))))\n    IConstraintOp\n    (-rator [_] `+)\n    (-rands [_] [u v w])\n    IConstraintWatchedStores\n    (-watched-stores [this]\n      #{::l/subst ::l/fd})))", :column 1, :line 846, :arglists ([u v w])}