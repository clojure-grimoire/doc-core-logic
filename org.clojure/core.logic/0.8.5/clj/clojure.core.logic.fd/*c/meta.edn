{:ns "clojure.core.logic.fd", :name "*c", :file "clojure/core/logic/fd.clj", :type :fn, :src "(defn *c [u v w]\n  (letfn [(safe-div [n c a t]\n            (if (zero? n)\n              c\n              (let [q (core/quot a n)]\n                (case t\n                  :lower (if (pos? (rem a n))\n                           (inc q)\n                           q)\n                  :upper q))))]\n   (reify\n     IEnforceableConstraint\n     IConstraintStep\n     (-step [this s]\n       (let-dom s [u du v dv w dw]\n         (reify\n           clojure.lang.IFn\n           (invoke [_ s]\n             (let [[wmin wmax] (if dw\n                                 (bounds dw)\n                                 [(core/* (-lb du) (-lb dv)) (core/* (-ub du) (-ub dv))])\n                   [umin umax] (if du\n                                 (bounds du)\n                                 [(safe-div (-ub dv) (-lb dw) (-lb dw) :lower)\n                                  (safe-div (-lb dv) (-lb dw) (-ub dw) :upper)])\n                   [vmin vmax] (if dv\n                                 (bounds dv)\n                                 [(safe-div (-ub du) (-lb dw) (-lb dw) :lower)\n                                  (safe-div (-lb du) (-lb dw) (-ub dw) :upper)])\n                   wi (interval (core/* umin vmin) (core/* umax vmax))\n                   ui (interval (safe-div vmax umin wmin :lower)\n                                (safe-div vmin umax wmax :upper))\n                   vi (interval (safe-div umax vmin wmin :lower)\n                                (safe-div umin vmax wmax :upper))]\n               (when-let [wi (if (and wi dw) (-intersection wi dw) wi)]\n                 (when-let [ui (if (and ui du) (-intersection ui du) ui)]\n                   (when-let [vi (if (and vi dv) (-intersection vi dv) vi)]\n                     (when (or (not (every? singleton-dom? [wi ui vi]))\n                               (core/= (core/* ui vi) wi))\n                       ((composeg*\n                          (process-dom w wi dw)\n                          (process-dom u ui du)\n                          (process-dom v vi dv)) s)))))))\n           IEntailed\n           (-entailed? [_]\n             (and (singleton-dom? du)\n                  (singleton-dom? dv)\n                  (singleton-dom? dw)\n                  (= (core/* du dv) dw)))\n           IRunnable\n           (-runnable? [_]\n             (cond\n               du (or dv dw)\n               dv (or du dw)\n               dw (or du dv)\n               :else false)))))\n     IConstraintOp\n     (-rator [_] `*)\n     (-rands [_] [u v w])\n     IConstraintWatchedStores\n     (-watched-stores [this]\n       #{::l/subst ::l/fd}))))", :column 1, :line 910, :arglists ([u v w])}