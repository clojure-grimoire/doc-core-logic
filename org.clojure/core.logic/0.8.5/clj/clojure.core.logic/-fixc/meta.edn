{:ns "clojure.core.logic", :name "-fixc", :file "clojure/core/logic.clj", :type :fn, :src "(defn -fixc\n  ([x f reifier] (-fixc x f nil reifier))\n  ([x f runnable reifier]\n     (reify\n       IConstraintStep\n       (-step [this s]\n         (let [xv (walk s x)]\n           (reify\n             clojure.lang.IFn\n             (invoke [_ s]\n               ((composeg (f xv s reifier) (remcg this)) s))\n             IRunnable\n             (-runnable? [_]\n               (if (fn? runnable)\n                 (runnable x s)\n                 (not (lvar? xv)))))))\n       IConstraintOp\n       (-rator [_] `fixc)\n       (-rands [_] (if (vector? x) x [x]))\n       IReifiableConstraint\n       (-reifyc [c v r s]\n         (if (fn? reifier)\n           (reifier c x v r s)\n           (let [x (walk* r x)]\n             `(fixc ~x ~reifier))))\n       IConstraintWatchedStores\n       (-watched-stores [this] #{::subst}))))", :column 1, :line 2688, :arglists ([x f reifier] [x f runnable reifier])}