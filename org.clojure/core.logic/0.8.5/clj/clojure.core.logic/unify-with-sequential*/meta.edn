{:ns "clojure.core.logic", :name "unify-with-sequential*", :file "clojure/core/logic.clj", :type :fn, :src "(defn unify-with-sequential* [u v s]\n  (cond\n    (sequential? v)\n    (if (and (counted? u) (counted? v)\n             (not (clojure.core/== (count u) (count v))))\n      nil\n      (loop [u (seq u) v (seq v) s s]\n        (if-not (nil? u)\n          (if-not (nil? v)\n            (if-let [s (unify s (first u) (first v))]\n              (recur (next u) (next v) s)\n              nil)\n            nil)\n          (if-not (nil? v) nil s))))\n\n    (lcons? v) (unify-terms v u s)\n    :else nil))", :column 1, :line 877, :arglists ([u v s])}