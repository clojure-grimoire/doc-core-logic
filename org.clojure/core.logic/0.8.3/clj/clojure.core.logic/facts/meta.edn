{:ns "clojure.core.logic", :name "facts", :file "clojure/core/logic.clj", :type :fn, :src "(defn facts\n  \"Define a series of facts. Takes a vector of vectors where each vector\n   represents a fact tuple, all with the same number of elements.\"\n  ([rel [f :as tuples]] (facts rel (count f) tuples))\n  ([^Rel rel arity tuples]\n     (let [rel-ns (:ns (meta rel))\n           rel-set (var-get (ns-resolve rel-ns (set-sym (.name rel) arity)))\n           tuples (map vec tuples)]\n       (swap! rel-set (fn [s] (into s tuples)))\n       (let [indexes (indexes-for rel arity)]\n         (doseq [[o i] indexes]\n           (let [index (var-get (ns-resolve rel-ns (index-sym (.name rel) arity o)))]\n             (let [indexed-tuples (map (fn [t]\n                                         {(nth t (dec i)) #{t}})\n                                       tuples)]\n               (swap! index\n                      (fn [i]\n                        (apply merge-with set/union i indexed-tuples))))))))))", :column 1, :line 1845, :arglists ([rel [f :as tuples]] [rel arity tuples]), :doc "Define a series of facts. Takes a vector of vectors where each vector\n   represents a fact tuple, all with the same number of elements."}