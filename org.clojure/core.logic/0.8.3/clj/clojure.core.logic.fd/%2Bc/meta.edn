{:ns "clojure.core.logic.fd", :name "+c", :file "clojure/core/logic/fd.clj", :type :fn, :src "(defn +c [u v w]\n  (reify \n    IEnforceableConstraint\n    clojure.lang.IFn\n    (invoke [this s]\n      (let-dom s [u du v dv w dw]\n        (let [[wmin wmax] (if (domain? dw)\n                            (bounds dw)\n                            [(core/+ (lb du) (lb dv)) (core/+ (ub du) (ub dv))])\n              [umin umax] (if (domain? du)\n                            (bounds du)\n                            [(core/- (lb dw) (ub dv)) (core/- (ub dw) (lb dv))])\n              [vmin vmax] (if (domain? dv)\n                            (bounds dv)\n                            [(core/- (lb dw) (ub du)) (core/- (ub dw) (lb du))])]\n          ((composeg*\n            (process-dom w (interval (core/+ umin vmin) (core/+ umax vmax)))\n            (process-dom u (interval (core/- wmin vmax) (core/- wmax vmin)))\n            (process-dom v (interval (core/- wmin umax) (core/- wmax umin)))\n            (+c-guard u v w))\n           s))))\n    IConstraintOp\n    (rator [_] `+)\n    (rands [_] [u v w])\n    IRelevant\n    (-relevant? [this s]\n      (let-dom s [u du v dv w dw]\n        (cond\n         (not (singleton-dom? du)) true\n         (not (singleton-dom? dv)) true\n         (not (singleton-dom? dw)) true\n         :else (not= (core/+ du dv) dw))))\n    IRunnable\n    (runnable? [this s]\n      ;; we want to run even if w doesn't have a domain\n      ;; this is to support eqfd\n      (let-dom s [u du v dv w dw]\n        (cond\n          (domain? du) (or (domain? dv) (domain? dw))\n          (domain? dv) (or (domain? du) (domain? dw))\n          (domain? dw) (or (domain? du) (domain? dv))\n          :else false)))\n    IConstraintWatchedStores\n    (watched-stores [this]\n      #{::l/subst ::l/fd})))", :column 1, :line 878, :arglists ([u v w])}