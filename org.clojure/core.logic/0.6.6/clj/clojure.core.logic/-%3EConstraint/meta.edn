{:type :fn, :src "(deftype Constraint [^String name ^clojure.lang.Associative m okeys hash]\n  Object\n  (equals [this o]\n          (and (.. this getClass (isInstance o))\n               (let [^Constraint o o]\n                 (identical? name (.name o)))))\n  (hashCode [_] hash)\n  clojure.lang.Associative\n  (containsKey [this key]\n               (contains? m key))\n  (entryAt [this key]\n           (.entryAt m key))\n  clojure.lang.IPersistentMap\n  (without [this key]\n           (Constraint. name (dissoc m key) okeys hash))\n  clojure.lang.ISeq\n  (first [_] (first m))\n  (seq [_] (seq m))\n  (count [_] (count m))\n  clojure.lang.ILookup\n  (valAt [this key]\n         (m key)))", :ns "clojure.core.logic", :name "->Constraint", :file "clojure/core/logic.clj", :column 1, :line 1877, :arglists ([name m okeys hash]), :doc "Positional factory function for class clojure.core.logic.Constraint."}