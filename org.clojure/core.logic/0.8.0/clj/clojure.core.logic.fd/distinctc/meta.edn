{:ns "clojure.core.logic.fd", :name "distinctc", :file "clojure/core/logic/fd.clj", :type :fn, :src "(defn distinctc\n  \"The real distinct constraint. v* can be seq of logic vars and\n   values or it can be a logic var itself. This constraint does not \n   run until v* has become ground. When it has become ground we group\n   v* into a set of logic vars and a sorted set of known singleton \n   values. We then construct the individual constraint for each var.\"\n  [v*]\n  (reify\n    IEnforceableConstraint\n    clojure.lang.IFn\n    (invoke [this s]\n      (let [v* (walk s v*)\n            {x* true n* false} (group-by lvar? v*)\n            n* (sort core/< n*)]\n        (when (list-sorted? core/< n*)\n          (let [x* (into #{} x*)\n                n* (into (sorted-set) n*)]\n            (loop [xs (seq x*) s s]\n              (if xs\n                (let [x (first xs)]\n                  (when-let [s ((-distinct x (disj x* x) n*) s)]\n                    (recur (next xs) s)))\n                ((remcg this) s)))))))\n    IConstraintOp\n    (rator [_] `distinct)\n    (rands [_] [v*])\n    IRunnable\n    (runnable? [this s]\n      (let [v* (walk s v*)]\n        (not (lvar? v*))))\n    IConstraintWatchedStores\n    (watched-stores [this] #{::l/subst})))", :column 1, :line 1063, :arglists ([v*]), :doc "The real distinct constraint. v* can be seq of logic vars and\n   values or it can be a logic var itself. This constraint does not \n   run until v* has become ground. When it has become ground we group\n   v* into a set of logic vars and a sorted set of known singleton \n   values. We then construct the individual constraint for each var."}