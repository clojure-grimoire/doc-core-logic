{:ns "clojure.core.logic", :name "-fixc", :file "clojure/core/logic.clj", :type :fn, :src "(defn -fixc\n  ([x f reifier] (-fixc x f nil reifier))\n  ([x f runnable reifier]\n     (reify\n       clojure.lang.IFn\n       (invoke [this a]\n         (let [x (walk a x)]\n           ((composeg (f x a reifier) (remcg this)) a)))\n       IConstraintOp\n       (rator [_] `fixc)\n       (rands [_] (if (vector? x) x [x]))\n       IReifiableConstraint\n       (reifyc [c v r a]\n         (if (fn? reifier)\n           (reifier c x v r a)\n           (let [x (walk* r x)]\n             `(fixc ~x ~reifier))))\n       IRunnable\n       (runnable? [_ a]\n         (if (fn? runnable)\n           (runnable x a)\n           (not (lvar? (walk a x)))))\n       IConstraintWatchedStores\n       (watched-stores [this] #{::subst}))))", :column 1, :line 2797, :arglists ([x f reifier] [x f runnable reifier])}