{:ns "clojure.core.logic", :name "difference-with", :file "clojure/core/logic.clj", :type :fn, :src "(defn difference-with\n  \"Returns a map that consists of the first map with the rest of the maps\n   removed from it. When a key is found in the first map and a later map,\n   the value from the later map will be combined with the value in the first\n   map by calling (f val-in-first val-in-later). If this function returns nil\n   then the key will be removed completely.\"\n  [f & maps]\n  (when (some identity maps)\n    (let [empty-is-nil (fn [s] (if (empty? s) nil s))\n          merge-entry (fn [m [k v]]\n                         (if (contains? m k)\n                           (if-let [nv (empty-is-nil (f (get m k) v))]\n                             (assoc m k nv)\n                             (dissoc m k))))\n          merge-map (fn [m1 m2] (reduce merge-entry (or m1 {}) (seq m2)))]\n      (reduce merge-map maps))))", :column 1, :line 1609, :arglists ([f & maps]), :doc "Returns a map that consists of the first map with the rest of the maps\n   removed from it. When a key is found in the first map and a later map,\n   the value from the later map will be combined with the value in the first\n   map by calling (f val-in-first val-in-later). If this function returns nil\n   then the key will be removed completely."}