{:ns "clojure.core.logic", :name "extend-rel", :file "clojure/core/logic.clj", :type :macro, :src "(defmacro extend-rel [name & args]\n  (let [arity (count args)\n        r (range 1 (clojure.core/inc arity))\n        as (map a-sym r)\n        indexed (vec (filter (fn [[a i]]\n                               (-> a meta :index))\n                             (map vector\n                                  args\n                                  (range 1 (clojure.core/inc arity)))))\n        check-lvar (fn [[o i]]\n                     (let [a (a-sym i)]\n                       `((not (clojure.core.logic/contains-lvar? (clojure.core.logic/walk* ~'a ~a)))\n                         ((deref ~(index-sym name arity o)) (clojure.core.logic/walk* ~'a ~a)))))\n        indexed-set (fn [[o i]]\n                      `(def ~(index-sym name arity o) (atom {})))]\n    (if (<= arity 20)\n     `(do\n        (def ~(set-sym name arity) (atom #{}))\n        ~@(map indexed-set indexed)\n        (add-indexes ~name ~arity '~indexed)\n        (setfn ~name ~arity\n               (fn [~@as]\n                 (fn [~'a]\n                   (let [set# (cond\n                               ~@(mapcat check-lvar indexed)\n                               :else (deref ~(set-sym name arity)))]\n                     (to-stream\n                      (->> set#\n                           (map (fn [cand#]\n                                  (when-let [~'a (clojure.core.logic/unify ~'a [~@as] cand#)]\n                                    ~'a)))\n                           (remove nil?)))))))))))", :column 1, :line 1550, :macro true, :arglists ([name & args])}