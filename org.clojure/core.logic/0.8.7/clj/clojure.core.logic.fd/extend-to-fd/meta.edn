{:ns "clojure.core.logic.fd", :name "extend-to-fd", :file "clojure/core/logic/fd.clj", :type :macro, :src "(defmacro extend-to-fd [t]\n  `(extend-type ~t\n     IMemberCount\n     (~'-member-count [this#] 1)\n\n     IInterval\n     (~'-lb [this#] this#)\n     (~'-ub [this#] this#)\n\n     ISortedDomain\n     (~'-drop-one [this#]\n       nil)\n     (~'-drop-before [this# n#]\n       (when (clojure.core/>= this# n#)\n         this#))\n     (~'-keep-before [this# n#]\n       (when (clojure.core/< this# n#)\n         this#))\n\n     ISet\n     (~'-member? [this# that#]\n       (if (integer? that#)\n         (= this# that#)\n         (-member? that# this#)))\n     (~'-disjoint? [this# that#]\n       (if (integer? that#)\n         (not= this# that#)\n         (-disjoint? that# this#)))\n     (~'-intersection [this# that#]\n       (cond\n        (integer? that#) (when (= this# that#)\n                           this#)\n        (interval? that#) (-intersection that# this#)\n        :else (intersection* this# that#)))\n     (~'-difference [this# that#]\n       (cond\n        (integer? that#) (if (= this# that#)\n                           nil\n                           this#)\n        (interval? that#) (-difference that# this#)\n        :else (difference* this# that#)))\n\n     IIntervals\n     (~'-intervals [this#]\n       (list this#))))", :column 1, :line 168, :macro true, :arglists ([t])}