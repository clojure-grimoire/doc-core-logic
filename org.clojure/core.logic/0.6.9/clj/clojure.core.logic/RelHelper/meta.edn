{:ns "clojure.core.logic", :name "RelHelper", :file "clojure/core/logic.clj", :type :macro, :src "(defmacro RelHelper [arity]\n  (let [r (range 1 (+ arity 2))\n        fs (map f-sym r)\n        mfs (map #(with-meta % {:volatile-mutable true :tag clojure.lang.IFn})\n                 fs)\n        create-sig (fn [n]\n                     (let [args (map a-sym (range 1 (clojure.core/inc n)))]\n                       `(invoke [~'_ ~@args]\n                                  (~(f-sym n) ~@args))))\n        set-case (fn [[f arity]]\n                   `(~arity (set! ~f ~'f)))]\n    `(do\n       (deftype ~'Rel [~'name ~'indexes ~'meta\n                       ~@mfs]\n         clojure.lang.IObj\n         (~'withMeta [~'_ ~'meta]\n           (~'Rel. ~'name ~'indexes ~'meta ~@fs))\n         (~'meta [~'_]\n           ~'meta)\n         clojure.lang.IFn\n         ~@(map create-sig r)\n         (~'applyTo [~'this ~'arglist]\n            (~'apply-to-helper ~'this ~'arglist))\n         ~'IRel\n         (~'setfn [~'_ ~'arity ~'f]\n           (case ~'arity\n                 ~@(mapcat set-case (map vector fs r))))\n         (~'indexes-for [~'_ ~'arity]\n           ((deref ~'indexes) ~'arity))\n         (~'add-indexes [~'_ ~'arity ~'index]\n           (swap! ~'indexes assoc ~'arity ~'index)))\n       (defmacro ~'defrel \n         \"Define a relation for adding facts. Takes a name and some fields.\n         Use fact/facts to add facts and invoke the relation to query it.\"\n         [~'name ~'& ~'rest]\n         (defrel-helper ~'name ~arity ~'rest)))))", :column 1, :line 1510, :macro true, :arglists ([arity])}