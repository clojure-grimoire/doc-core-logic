{:ns "clojure.core.logic", :name "def-apply-to-helper", :file "clojure/core/logic.clj", :type :macro, :src "(defmacro def-apply-to-helper [n]\n  (let [r (range 1 (clojure.core/inc n))\n        args (map a-sym r)\n        arg-binds (fn [n]\n                    (mapcat (fn [a]\n                              `(~a (first ~'arglist)\n                                   ~'arglist (next ~'arglist)))\n                            (take n args)))\n        case-clause (fn [n]\n                      `(~n (let [~@(arg-binds (dec n))]\n                            (.invoke ~'ifn ~@(take (dec n) args)\n                                     (clojure.lang.Util/ret1\n                                      (first ~'arglist) nil)))))]\n   `(defn ~'apply-to-helper\n      [~(with-meta 'ifn {:tag clojure.lang.IFn}) ~'arglist]\n      (case (clojure.lang.RT/boundedLength ~'arglist 20)\n            ~@(mapcat case-clause r)))))", :column 1, :line 1781, :macro true, :arglists ([n])}