{:ns "clojure.core.logic.fd", :name "intersection*", :file "clojure/core/logic/fd.clj", :type :fn, :src "(defn intersection* [is js]\n  (loop [is (seq (-intervals is)) js (seq (-intervals js)) r []]\n    (if (and is js)\n      (let [i (first is)\n            j (first js)]\n        (cond\n         (interval-< i j) (recur (next is) js r)\n         (interval-> i j) (recur is (next js) r)\n         :else\n         (let [[imin imax] (bounds i)\n               [jmin jmax] (bounds j)]\n           (cond\n            (core/<= imin jmin)\n            (cond\n             (core/< imax jmax)\n             (recur (next is)\n                    (cons (interval (inc imax) jmax) (next js))\n                    (conj r (interval jmin imax)))\n             (core/> imax jmax)\n             (recur (cons (interval (inc jmax) imax) (next is))\n                    (next js)\n                    (conj r j))\n             :else\n             (recur (next is) (next js)\n                    (conj r (interval jmin jmax))))\n            (core/> imin jmin)\n            (cond\n             (core/> imax jmax)\n             (recur (cons (interval (inc jmax) imax) (next is))\n                    (next js)\n                    (conj r (interval imin jmax)))\n             (core/< imax jmax)\n             (recur is (cons (interval (inc imax) jmax) (next js))\n                    (conj r i))\n             :else\n             (recur (next is) (next js)\n                    (conj r (interval imin imax))))))))\n      (apply multi-interval r))))", :column 1, :line 369, :arglists ([is js])}