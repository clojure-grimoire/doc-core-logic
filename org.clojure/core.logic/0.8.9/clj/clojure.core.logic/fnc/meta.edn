{:ns "clojure.core.logic", :name "fnc", :file "clojure/core/logic.clj", :type :macro, :src "(defmacro fnc\n  \"Define an anonymous constraint that can be used with the unifier:\n\n     (let [oddc (fnc [x] (odd? x))]\n\n       (unifier {:a '?a} {:a 1} :when {'?a oddc})\n         ;;=> {:a 1}\n\n       (unifier {:a '?a} {:a 2} :when {'?a oddc})\n         ;;=> nil\n     )\n\n  Note, the constraint will not run until all arguments are fully ground.\n\n  Use defnc to define a constraint and assign a toplevel var.\"\n  [args & body]\n  (let [name (symbol (gensym \"fnc\"))]\n    `(fn ~args\n       (letfn [(~name [~@args]\n                 (reify\n                   clojure.core.logic.protocols/IConstraintStep\n                   (-step [this# a#]\n                     (reify\n                       ~'clojure.lang.IFn\n                       (~'invoke [_# a#]\n                         (let [[~@args :as args#] (map #(clojure.core.logic/walk* a# %) ~args)\n                                test# (do ~@body)]\n                           (when test#\n                             ((clojure.core.logic/remcg this#) a#))))\n                       clojure.core.logic.protocols/IRunnable\n                       (~'-runnable? [_#]\n                         (clojure.core.logic/ground-term? ~args a#))))\n                   clojure.core.logic.protocols/IConstraintOp\n                   (~'-rator [_#] '~name)\n                   (~'-rands [_#] (filter clojure.core.logic/lvar? (flatten ~args)))\n                   clojure.core.logic.protocols/IReifiableConstraint\n                   (~'-reifyc [_# _# r# a#]\n                     (list '~name (map #(clojure.core.logic/-reify r# %) ~args)))\n                   clojure.core.logic.protocols/IConstraintWatchedStores\n                   (~'-watched-stores [_#] #{:clojure.core.logic/subst})))]\n         (cgoal (~name ~@args))))))", :column 1, :line 2590, :macro true, :arglists ([args & body]), :doc "Define an anonymous constraint that can be used with the unifier:\n\n     (let [oddc (fnc [x] (odd? x))]\n\n       (unifier {:a '?a} {:a 1} :when {'?a oddc})\n         ;;=> {:a 1}\n\n       (unifier {:a '?a} {:a 2} :when {'?a oddc})\n         ;;=> nil\n     )\n\n  Note, the constraint will not run until all arguments are fully ground.\n\n  Use defnc to define a constraint and assign a toplevel var."}