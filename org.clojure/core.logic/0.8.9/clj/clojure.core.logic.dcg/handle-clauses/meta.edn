{:ns "clojure.core.logic.dcg", :name "handle-clauses", :file "clojure/core/logic/dcg.clj", :type :fn, :src "(defn handle-clauses [env [c & r :as cs]]\n  (cond\n   (nil? (seq cs)) ()\n   (fresh-expr? c) (cons `(fresh ~(second c)\n                       ~@(handle-clauses env (drop 2 c)))\n                    (handle-clauses env r))\n   (!dcg? c) (cons (second c) (handle-clauses env r))\n   (vector? c) (cons (->lcons env c (-> c meta :index))\n                     (handle-clauses env r))\n   (and (seq? c)\n        (= (first c) `quote)\n        (vector? (second c))) (cons (->lcons env (second c) (-> c meta :index) true)\n                                     (handle-clauses env r))\n   :else (let [i (-> c meta :index)\n               c (if (seq? c) c (list c))]\n           (cons (concat c [(env (dec i)) (env i)])\n                 (handle-clauses env r)))))", :column 1, :line 65, :arglists ([env [c & r :as cs]])}