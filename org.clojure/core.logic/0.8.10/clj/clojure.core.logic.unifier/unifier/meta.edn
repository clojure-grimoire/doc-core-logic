{:ns "clojure.core.logic.unifier", :name "unifier", :file "clojure/core/logic/unifier.clj", :type :fn, :src "(defn unifier\n  \"Return the unifier for terms ts. Will prep the terms.\"\n  ([ts] (unifier {} ts))\n  ([opts ts]\n     (let [opts (if (contains? opts :as)\n                  (assoc opts :as\n                    (->> (:as opts)\n                      (map (fn [[k v]] [(lvar k false) (prep v)]))\n                      (into {})))\n                  opts)\n           ts' (map prep ts)\n           lvars (->> (concat ts' (map val (:as opts)))\n                   (map #(-> % meta ::lvars))\n                   (reduce into))]\n       (unifier* (assoc opts :lvars lvars) (map prep ts)))))", :column 1, :line 147, :arglists ([ts] [opts ts]), :doc "Return the unifier for terms ts. Will prep the terms."}