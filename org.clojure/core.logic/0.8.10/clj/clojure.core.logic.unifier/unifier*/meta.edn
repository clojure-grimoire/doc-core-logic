{:ns "clojure.core.logic.unifier", :name "unifier*", :file "clojure/core/logic/unifier.clj", :type :fn, :src "(defn unifier*\n  \"Return the unifier that unifies terms ts.\n  All terms in ts should prepped terms.\"\n  ([ts] (unifier* {} ts))\n  ([opts ts]\n     (letfn [(-unifier* [s u w]\n               (let [s (fix-constraints (l/unify (with-meta s {:reify-vars false}) u w))]\n                 (when s\n                   (->> (:lvars opts)\n                     (map (fn [sym] [sym (lvar sym false)]))\n                     (filter (fn [[sym var]] (not= (walk s var) var)))   \n                     (map (fn [[sym var]] [sym (-reify s var)]))\n                     (into {})))))]\n       (let [init-s (init-s opts empty-s)]\n         (reduce #(-unifier* init-s %1 %2) ts)))))", :column 1, :line 118, :arglists ([ts] [opts ts]), :doc "Return the unifier that unifies terms ts.\n  All terms in ts should prepped terms."}