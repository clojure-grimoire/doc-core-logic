{:ns "clojure.core.logic", :name "-predc", :file "clojure/core/logic.clj", :type :fn, :src "(defn -predc\n  ([x p] (-predc x p p))\n  ([x p pform]\n     (reify\n       IConstraintStep\n       (-step [this s]\n         (reify\n           clojure.lang.IFn\n           (invoke [_ s]\n             (let [x (walk s x)]\n               (when (p x)\n                 ((remcg this) s))))\n           IRunnable\n           (-runnable? [_]\n             (not (lvar? (walk s x))))))\n       IConstraintOp\n       (-rator [_] (if (seq? pform)\n                    `(predc ~pform)\n                    `predc))\n       (-rands [_] [x])\n       IReifiableConstraint\n       (-reifyc [c v r s]\n         (if (and (not= p pform) (fn? pform))\n           (pform c v r s)\n           pform))\n       IConstraintWatchedStores\n       (-watched-stores [this] #{::subst}))))", :column 1, :line 2659, :arglists ([x p] [x p pform])}