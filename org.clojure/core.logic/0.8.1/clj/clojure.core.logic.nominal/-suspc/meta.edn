{:ns "clojure.core.logic.nominal", :name "-suspc", :file "clojure/core/logic/nominal.clj", :type :fn, :src "(defn -suspc\n  [v1 v2 swap]\n  (reify\n    Object\n    (toString [_]\n      (str \"suspc\" v1 v2 swap))\n    clojure.lang.IFn\n    (invoke [c a]\n      ((composeg*\n        (remcg c)\n        (fn [a]\n          (let [t1 (walk a v1)\n                t2 (walk a v2)]\n            (cond\n              (not (lvar? t1))\n              (-do-suspc t1 t2 swap a)\n              (not (lvar? t2))\n              (-do-suspc t2 t1 swap a)\n              :else ;; (= t1 t2)\n              (loop [a* swap\n                     a a]\n                (if (empty? a*) a\n                  (recur (rest a*) ((hash (first a*) t2) a)))))))) a))\n    IConstraintOp\n    (rator [_] `suspc)\n    (rands [_] [v1 v2])\n    IReifiableConstraint\n    (reifyc [c v r a]\n      (let [t1 (walk* r (walk* a v1))\n            t2 (walk* r (walk* a v2))\n            swap (walk* r swap)]\n        (when (and\n                (not (lvar? t1))\n                (not (lvar? t2))\n                (symbol? (first swap))\n                (symbol? (second swap)))\n          `(~'swap ~swap ~t1 ~t2))))\n    IRunnable\n    (runnable? [_ a]\n      (let [t1 (walk a v1)\n            t2 (walk a v2)]\n        (or (not (lvar? t1)) (not (lvar? t2)) (= t1 t2))))\n    IConstraintWatchedStores\n    (watched-stores [this] #{::l/subst})))", :column 1, :line 208, :arglists ([v1 v2 swap])}