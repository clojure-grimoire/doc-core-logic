{:ns "clojure.core.logic", :name "waiting-stream-check", :file "clojure/core/logic.clj", :type :fn, :src "(defn waiting-stream-check\n  \"Take a waiting stream, a success continuation, and a failure continuation.\n   If we don't find any ready suspended streams, invoke the failure continuation. \n   If we find a ready suspended stream calculate the remainder of the waiting\n   stream. If we've reached the fixpoint just call the thunk of the suspended\n   stream, otherwise call mplus on the result of the thunk and the remainder\n   of the waiting stream. Pass this result to the success contination.\"\n  [w success-cont failure-cont]\n  (loop [w w a []]\n    (cond\n     (nil? w) (failure-cont)\n\n     (ready? (first w))\n     (success-cont\n       (fn []\n         (let [ss (first w)\n               f  (:f ss)\n               w  (into a (next w))]\n           (if (empty? w)\n             (f)\n             (mplus (f) (fn [] w))))))\n\n     :else (recur (next w) (conj a (first w))))))", :column 1, :line 1969, :arglists ([w success-cont failure-cont]), :doc "Take a waiting stream, a success continuation, and a failure continuation.\n   If we don't find any ready suspended streams, invoke the failure continuation. \n   If we find a ready suspended stream calculate the remainder of the waiting\n   stream. If we've reached the fixpoint just call the thunk of the suspended\n   stream, otherwise call mplus on the result of the thunk and the remainder\n   of the waiting stream. Pass this result to the success contination."}